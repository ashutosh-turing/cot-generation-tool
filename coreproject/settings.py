"""
Django settings for coreproject project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os

# FORCE_SCRIPT_NAME = '/new'

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

from pathlib import Path

import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-v2-3mp*@_tl99u3prftl(n-#_#2ycozh!v$hasfq&6(7&9)&g+zo&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# OpenAI Configuration
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY not found in environment variables. Please check your .env file.")


# Anthropic Configuration
ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY')
if not ANTHROPIC_API_KEY:
    raise ValueError("ANTHROPIC_API_KEY not found in environment variables. Please check your .env file.")

# Gemini Configuration
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if not GEMINI_API_KEY:
    raise ValueError("GEMINI_API_KEY not found in environment variables. Please check your .env file.")

# Google Cloud Project ID
GOOGLE_CLOUD_PROJECT_ID = os.getenv('GOOGLE_CLOUD_PROJECT_ID')
if not GOOGLE_CLOUD_PROJECT_ID:
    raise ValueError("GOOGLE_CLOUD_PROJECT_ID not found in environment variables. Please check your .env file.")

# Google Cloud Service Account
SERVICE_ACCOUNT_FILE = os.path.join(BASE_DIR, 'service_account.json')
if not os.path.exists(SERVICE_ACCOUNT_FILE):
    print(f"Warning: service_account.json not found at {SERVICE_ACCOUNT_FILE}")

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for django-allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'eval',
    'processor'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # WhiteNoise middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Required for django-allauth
    # 'eval.middleware.TuringDomainMiddleware',  # Enforce turing.com email restriction (Temporarily disabled)
]

ROOT_URLCONF = 'coreproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),  # Add project-level templates directory
            os.path.join(BASE_DIR, 'eval', 'templates'),
            os.path.join(BASE_DIR, 'processor', 'templates'),
            os.path.join(BASE_DIR, 'coreproject', 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'coreproject.context_processors.streams_and_subjects',
                'coreproject.context_processors.user_group',
            ],
        },
    },
]

WSGI_APPLICATION = 'coreproject.wsgi.application'
ASGI_APPLICATION = 'coreproject.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db_v2.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'eval', 'static'),
    os.path.join(BASE_DIR, 'processor', 'static'),
    os.path.join(BASE_DIR, 'static'),
]
# Add STATIC_ROOT for WhiteNoise
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_v2')

# WhiteNoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/uploads/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'eval', 'static', 'uploads_v2')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Logging Configuration
if not DEBUG: 
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'file': {
                'level': 'INFO',
                'class': 'logging.FileHandler',
                'filename': '/home/cot/v2/logs/django_v2.log',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['file'],
                'level': 'INFO',
                'propagate': True,
            },
        },
    }


# django-allauth settings
SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'eval.auth.TuringDomainBackend',  # Custom backend to restrict by email domain
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# django-allauth settings
# Note: Google OAuth credentials are configured in the database
# through the Django admin interface, not here in settings.py
# Restrict social account logins to specific domains
SOCIALACCOUNT_PROVIDERS = {
   'google': {
        'VERIFIED_EMAIL': True,
        'DOMAIN_ALLOWLIST': ['turing.com', 'admin.turing.com', 'lead.turing.com'],
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
    }
}

# Allow automatic user creation for new social accounts with domain restrictions
SOCIALACCOUNT_AUTO_SIGNUP = True

# Don't require email verification since Google already verifies emails
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'

# Adapter to handle domain restrictions
SOCIALACCOUNT_ADAPTER = 'eval.adapters.CustomSocialAccountAdapter'

# Additional allauth settings
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_LOGIN_METHODS = ['email']
ACCOUNT_SIGNUP_FIELDS = []

# Skip intermediate confirmation page for social login
SOCIALACCOUNT_LOGIN_ON_GET = True

# OAuth protocol setting (use 'https' in production)
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http' if DEBUG else 'https'

# OAuth callback URL - only used in development
if DEBUG:
    SOCIALACCOUNT_CALLBACK_URL = 'http://127.0.0.1:8000/accounts/google/login/callback/'

# CSRF trusted origins
CSRF_TRUSTED_ORIGINS = [
    'https://8000-w-ajaysharma-m7vs3ir4.cluster-nt5kzrd6prdl6u5jmfspypcu4o.cloudworkstations.dev',
    'https://cot.turing.com',
    'http://127.0.0.1:32897',
    'http://localhost:8000'
]

# Production domain settings
if not DEBUG:
    ALLOWED_HOSTS = ['v2.cot.turing.com', 'www.v2.cot.turing.com']
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Note: Channel layers removed - using polling-based API instead of WebSocket
