# Generated by Django 5.2 on 2025-07-23 05:01

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('eval', '0016_tasksyncconfig_display_config_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserActivitySession',
            fields=[
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('activity_type', models.CharField(choices=[('trainer_analysis', 'Trainer Question Analysis'), ('review_task', 'Task Review'), ('modal_playground', 'Modal Playground'), ('dashboard_view', 'Dashboard View')], max_length=50)),
                ('session_start', models.DateTimeField(auto_now_add=True)),
                ('session_end', models.DateTimeField(blank=True, null=True)),
                ('focus_time_minutes', models.PositiveIntegerField(default=0, help_text='Actual engaged time in minutes')),
                ('total_time_minutes', models.PositiveIntegerField(default=0, help_text='Total session time in minutes')),
                ('page_interactions', models.PositiveIntegerField(default=0, help_text='Number of clicks, scrolls, etc.')),
                ('llm_queries_count', models.PositiveIntegerField(default=0, help_text='Number of LLM queries in this session')),
                ('activity_data', models.JSONField(blank=True, default=dict, help_text='Aggregated activity metrics (no detailed tracking)')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activity_sessions', to='eval.trainertask')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'created_at'], name='eval_userac_user_id_7814a2_idx'), models.Index(fields=['activity_type', 'created_at'], name='eval_userac_activit_838c29_idx'), models.Index(fields=['user', 'activity_type'], name='eval_userac_user_id_a85a75_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserProductivityInsight',
            fields=[
                ('insight_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], max_length=10)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('total_focus_time_minutes', models.PositiveIntegerField(default=0)),
                ('total_sessions', models.PositiveIntegerField(default=0)),
                ('tasks_analyzed', models.PositiveIntegerField(default=0)),
                ('llm_queries_total', models.PositiveIntegerField(default=0)),
                ('modal_playground_sessions', models.PositiveIntegerField(default=0)),
                ('average_session_length', models.FloatField(default=0.0)),
                ('average_engagement_score', models.FloatField(default=0.0)),
                ('activity_breakdown', models.JSONField(default=dict, help_text='Time spent by activity type')),
                ('insights_data', models.JSONField(default=dict, help_text='Personal productivity patterns and insights')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productivity_insights', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-period_start'],
                'indexes': [models.Index(fields=['user', 'period_type', 'period_start'], name='eval_userpr_user_id_eebd3e_idx')],
                'unique_together': {('user', 'period_type', 'period_start')},
            },
        ),
    ]
